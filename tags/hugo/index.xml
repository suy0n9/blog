<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>hugo on suy0n9.com</title><link>https://suy0n9.com/tags/hugo/</link><description>Recent content in hugo on suy0n9.com</description><generator>Hugo -- gohugo.io</generator><language>ja-jp</language><copyright>&amp;copy; suy0n9 All Right Reserved.</copyright><lastBuildDate>Tue, 23 Feb 2021 22:56:26 +0900</lastBuildDate><atom:link href="https://suy0n9.com/tags/hugo/index.xml" rel="self" type="application/rss+xml"/><item><title>HugoのRSS FeedをFull-textにする</title><link>https://suy0n9.com/posts/2021/02/23/full-content-rss-feed-on-hugo/</link><pubDate>Tue, 23 Feb 2021 22:56:26 +0900</pubDate><guid>https://suy0n9.com/posts/2021/02/23/full-content-rss-feed-on-hugo/</guid><description>&lt;p>このサイトのRSS FeedをFull-textにしたのでメモ．&lt;/p></description><content:encoded><![CDATA[
              <p>このサイトのRSS FeedをFull-textにしたのでメモ．</p>
<h2 id="背景">背景</h2>
<p>ふと自分のブログをRSSリーダーに登録してみたら記事の本文が最初だけしか表示されていなかった．</p>
<p>調べてみると，どうやらHugoの<a href="https://gohugo.io/templates/rss/#the-embedded-rssxml">default RSS template</a>では<code>&lt;description&gt;{{ .Summary | html  }}&lt;/description&gt;</code>のみで<code>.Content</code>が定義されていない模様．</p>
<h2 id="解決策">解決策</h2>
<p>関連記事を漁っていると<code>description</code>の<code>.Summary</code>を<code>.Content</code>に変更する方法がいくつか見つかった．
ただ<code>description</code>は短めの要約を定義するのが推奨っぽいので<code>content:encoded</code>を追加する方式にした．</p>
<h4 id="rssxmlを用意">rss.xmlを用意</h4>
<p><code>layouts/_default/rss.xml</code>を配置してデフォルトのtemplateを上書きする．<a href="https://gohugo.io/templates/rss/#the-embedded-rssxml">default RSS template</a>に記載されている<a href="https://github.com/gohugoio/hugo/blob/master/tpl/tplimpl/embedded/templates/_default/rss.xml">Githubのリンク</a>からダウンロードする．</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">curl <span style="color:#e6db74">&#34;https://raw.githubusercontent.com/gohugoio/hugo/master/tpl/tplimpl/embedded/templates/_default/rss.xml&#34;</span> &gt; layouts/_default/rss.xml
</code></pre></div><h4 id="rssxmlを修正">rss.xmlを修正</h4>
<p>以下で元のrss.xmlと変更を加えた<code>layouts/_default/rss.xml</code>のdiffを取る．</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">diff --label default --label custom &lt;<span style="color:#f92672">(</span>curl <span style="color:#e6db74">&#34;https://raw.githubusercontent.com/gohugoio/hugo/master/tpl/tplimpl/embedded/templates/_default/rss.xml&#34;</span><span style="color:#f92672">)</span> &lt;<span style="color:#f92672">(</span>cat layouts/_default/rss.xml<span style="color:#f92672">)</span>
</code></pre></div><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-diff" data-lang="diff"><span style="color:#f92672">--- default
</span><span style="color:#f92672"></span><span style="color:#a6e22e">+++ custom
</span><span style="color:#a6e22e"></span><span style="color:#75715e">@@ -11,7 +11,7 @@
</span><span style="color:#75715e"></span> {{- $pages = $pages | first $limit -}}
 {{- end -}}
 {{- printf &#34;&lt;?xml version=\&#34;1.0\&#34; encoding=\&#34;utf-8\&#34; standalone=\&#34;yes\&#34;?&gt;&#34; | safeHTML }}
<span style="color:#f92672">-&lt;rss version=&#34;2.0&#34; xmlns:atom=&#34;http://www.w3.org/2005/Atom&#34;&gt;
</span><span style="color:#f92672"></span><span style="color:#a6e22e">+&lt;rss version=&#34;2.0&#34; xmlns:atom=&#34;http://www.w3.org/2005/Atom&#34; xmlns:content=&#34;http://purl.org/rss/1.0/modules/content/&#34;&gt;
</span><span style="color:#a6e22e"></span>   &lt;channel&gt;
     &lt;title&gt;{{ if eq  .Title  .Site.Title }}{{ .Site.Title }}{{ else }}{{ with .Title }}{{.}} on {{ end }}{{ .Site.Title }}{{ end }}&lt;/title&gt;
     &lt;link&gt;{{ .Permalink }}&lt;/link&gt;
<span style="color:#75715e">@@ -33,6 +33,11 @@
</span><span style="color:#75715e"></span>       {{ with .Site.Author.email }}&lt;author&gt;{{.}}{{ with $.Site.Author.name }} ({{.}}){{end}}&lt;/author&gt;{{end}}
       &lt;guid&gt;{{ .Permalink }}&lt;/guid&gt;
       &lt;description&gt;{{ .Summary | html }}&lt;/description&gt;
<span style="color:#a6e22e">+      &lt;content:encoded&gt;
</span><span style="color:#a6e22e">+              {{ `&lt;![CDATA[` | safeHTML }}
</span><span style="color:#a6e22e">+              {{ .Content  }}
</span><span style="color:#a6e22e">+              {{ `]]&gt;` | safeHTML  }}
</span><span style="color:#a6e22e">+      &lt;/content:encoded&gt;
</span><span style="color:#a6e22e"></span>     &lt;/item&gt;
     {{ end }}
   &lt;/channel&gt;
</code></pre></div><ul>
<li><code>&lt;rss&gt;</code>に<code>xmlns:content=&quot;http://purl.org/rss/1.0/modules/content/&quot;</code>を追加
<ul>
<li>これが無いと<code>Namespace prefix content on encoded is not defined</code>でエラーになる</li>
</ul>
</li>
<li><code>&lt;content:encoded&gt;</code>を追加
<ul>
<li><code>&lt;content:encoded&gt;{{ .Content | html }}</code>でも良さそう</li>
</ul>
</li>
</ul>
<p>ひとまずこれでFeedlyではうまく表示出来てそう．Inoreader側ではキャッシュが保持されて過去記事には適用され無さそうなのでしばらくこれで運用してみて様子をみる．</p>
<h1 id="参考">参考</h1>
<hr>
<ul>
<li><a href="https://discourse.gohugo.io/t/full-text-rss-feed/8368">Full-text RSS feed</a></li>
<li><a href="https://blog.eternalrecurrence.space/posts/displaying-the-full-content-in-hugo-rss-feed/#bonus-the-difference-between--and---in-hugo">Displaying the Full Content in Hugo&rsquo;s RSS feed</a></li>
<li><a href="https://unusually.pink/full-content-rss-feeds-with-hugo/">Full Content RSS Feeds With Hugo</a></li>
<li><a href="https://blog.karashi.org/posts/fulltext-rss-with-hugo/">HugoでFull Text RSSを有効化する</a></li>
</ul>
              ]]></content:encoded></item><item><title>Hugoのundraftコマンドを再現する</title><link>https://suy0n9.com/posts/2020/10/31/undraft-command/</link><pubDate>Sat, 31 Oct 2020 00:13:34 +0900</pubDate><guid>https://suy0n9.com/posts/2020/10/31/undraft-command/</guid><description>Hugoでブログを書く際にArchetypesを設定しdraftをtrueにしているのだが，記事を書き終わってgit pushする前にdraf</description><content:encoded><![CDATA[
              <p>Hugoでブログを書く際に<a href="https://gohugo.io/content-management/archetypes/">Archetypes</a>を設定しdraftをtrueにしているのだが，記事を書き終わって<code>git push</code>する前にdraftをfalseにするのを毎回忘れてしまう．
更に<code>hugo new posts/&lt;filename&gt;.md</code>でMarkdown作成時にタイムスタンプが付与されるが，記事を書き終えた後に再度タイムスタンプを書き換えるのが面倒だったので調べた．</p>
<h2 id="結果">結果</h2>
<p>どうやら<code>hugo undraft</code>コマンドがあったが，既にremoveされていた．<br>
<a href="https://discourse.gohugo.io/t/how-to-touch-the-date-after-undraft-is-deleted/10525">How to touch the date after <code>undraft</code> is deleted?</a></p>
<h2 id="解決策">解決策</h2>
<p>僕は記事を書き始めて日をまたぐ時が多々ある．そしてdraftで書きためておいて然るべきタイミングでpublishしたい時もあるので，上記にあるように簡易スクリプトで対応するようにした．</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"><span style="color:#75715e">#!/bin/sh
</span><span style="color:#75715e"></span>
file<span style="color:#f92672">=</span>$1
now<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;</span><span style="color:#66d9ef">$(</span>date <span style="color:#e6db74">&#34;+%Y-%m-%dT%H:%M:%S%z&#34;</span> | sed -e <span style="color:#e6db74">&#39;s/00$/:00/&#39;</span><span style="color:#66d9ef">)</span><span style="color:#e6db74">&#34;</span>

<span style="color:#66d9ef">if</span> <span style="color:#f92672">[</span> -f <span style="color:#e6db74">&#34;</span><span style="color:#e6db74">${</span>file<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span> <span style="color:#f92672">]</span>; <span style="color:#66d9ef">then</span>
    sed -i -e <span style="color:#e6db74">&#39;s/^date: 20.*$/date: &#39;</span><span style="color:#e6db74">&#34;</span><span style="color:#e6db74">${</span>now<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span><span style="color:#e6db74">&#39;/&#39;</span> <span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span>           -e <span style="color:#e6db74">&#39;s/^draft: true$/draft: false/&#39;</span> <span style="color:#e6db74">&#34;</span><span style="color:#e6db74">${</span>file<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>
    echo <span style="color:#e6db74">&#34;Update date: </span><span style="color:#e6db74">${</span>now<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>
    echo <span style="color:#e6db74">&#34;Update draft: false&#34;</span>
<span style="color:#66d9ef">else</span>
    echo <span style="color:#e6db74">&#34;</span><span style="color:#e6db74">${</span>file<span style="color:#e6db74">}</span><span style="color:#e6db74"> not found&#34;</span>
    exit <span style="color:#ae81ff">1</span>
<span style="color:#66d9ef">fi</span>
exit <span style="color:#ae81ff">0</span>
</code></pre></div><p><code>date</code>コマンドで取得した<code>%z</code>のタイムゾーンでは<code>+hhmm</code>(+0900)形式になっている．しかし<a href="https://toml.io/en/v1.0.0-rc.3#offset-date-time">TOMLのoffset-date-time</a>では<code>+hh:mm</code>(+09:00)なので，<code>sed</code>で一度置換している．</p>
<p>上記をMacで実行する場合，<code>sed</code>がBSD版なのでGNU版を入れとかないと<code>-i</code>オプションがうまく動かない．</p>
<p>Homebrew でinstallする．</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ brew install gnu-sed
</code></pre></div><blockquote>
<p>If you need to use it as &ldquo;sed&rdquo;, you can add a &ldquo;gnubin&rdquo; directory to your PATH from your bashrc like:</p>
</blockquote>
<p><code>gsed</code>ではなく<code>sed</code>として利用できるようにパスを通す．</p>
<pre><code>PATH=&quot;/usr/local/opt/gnu-sed/libexec/gnubin:$PATH&quot;
</code></pre><h2 id="まとめ">まとめ</h2>
<p>しばらくこれで運用してみる．</p>

              ]]></content:encoded></item><item><title>MediumからHugoに移行した</title><link>https://suy0n9.com/posts/2020/10/18/medium2hugo/</link><pubDate>Sun, 18 Oct 2020 23:38:52 +0900</pubDate><guid>https://suy0n9.com/posts/2020/10/18/medium2hugo/</guid><description>ブログをMediumからHugoに移行した． 動機 主に以下の理由． Mediumの会員登録を促すポップアップが盛んになってきた カスタムドメインを</description><content:encoded><![CDATA[
              <p>ブログをMediumからHugoに移行した．</p>
<h1 id="動機">動機</h1>
<p>主に以下の理由．</p>
<ul>
<li>Mediumの会員登録を促すポップアップが盛んになってきた</li>
<li>カスタムドメインを使いたい</li>
<li>記事をGit管理したくなった</li>
</ul>
<p>カスタムドメインはそのうち設定しようかと思ってのんびりしていたらdeprecationされていた.<br>
<a href="https://help.medium.com/hc/en-us/articles/115003053487-Custom-Domains-service-deprecation">Custom Domains service deprecation</a><br>
なお，近々復活するみたいだが，時期は未定．</p>
<p>Git管理に関しては，「ブログサービスに一存するよりMarkdownで手元に記事を置いといた方がいざという時にサービスの運営を気にせず制御できる|安心感がある」みたいな話は良く目にしていたので, そうだなぁと思った次第．</p>
<p>これらの条件をすべて満たし，巷でよく使われているHugoにすべきかしばらく検討していた. 構築が面倒だったり凝りすぎて「書く」より「作る」になってしまいそうでずっと棚上げしていたが，重い腰を上げて移行した．</p>
<h1 id="hugoとは">Hugoとは</h1>
<p>Goで実装されている「Webサイト構築フレームワーク」だ．
使い方や詳細は<a href="https://gohugo.io/">公式サイト</a>に詳しく書かれているし，既に色んな人が書いているので以下略．</p>
<h1 id="移行について">移行について</h1>
<p>移行方法は<a href="https://gohugo.io/tools/migrations/#medium">公式ページ</a>で紹介されている<a href="https://github.com/gautamdhameja/medium-2-md">medium2md</a>を使用した.<br>
Mediumからエクスポートしたデータをmedium2mdでMarkdownに変換することでほぼできた．</p>
<h3 id="変換がうまく行かなかった箇所">変換がうまく行かなかった箇所</h3>
<h4 id="記事内のurlのmarkdownタイトルが長くなる">記事内のURLのMarkdownタイトルが長くなる</h4>
<p>Markdown記法のURLタイトルに恐らく元のHTMLに含まれているカード型リンク内のサマリ文章までがタイトルになってしまい，とても長いリンクになっていた．
長い箇所は記事数がそんなに多くなかったのであまり深く考えず気づいた箇所だけ手直しした．．．</p>
<h4 id="snsなどのリンクの埋め込み">SNSなどのリンクの埋め込み</h4>
<p>HugoではMarkdownの中に簡易的な記述でTwitterやYouTubeなどを埋め込める<a href="https://gohugo.io/content-management/shortcodes/">Shortcode</a>という機能がある．</p>
<p><code>medium2md</code>で変換されたMarkdownにはTwitterの埋め込み箇所がまるっと欠損していた．僕の場合は特定の箇所でしかTwitterを参照していなかったので，以下の様な簡易スクリプトで<code>Shortcode</code>を生成して貼り付けた．</p>
<script type="application/javascript" src="https://gist.github.com/suy0n9/739d95242a8c0946d1f313ff1fa593a2.js"></script>

<p>YouTubeの埋め込み箇所はそのままURLに展開されていた．これまた使用箇所が少なかったので気づいたところのリンクを<code>Shortcode</code>で貼り直した．</p>
<h2 id="hosting--deployment">Hosting &amp; Deployment</h2>
<p>構築したサイトはGithub Pagesで公開している．</p>
<p>基本的には以下の公式ページ通りにすればできる．</p>
<p><a href="https://gohugo.io/hosting-and-deployment/hosting-on-github/">Host on GitHub</a></p>
<p>少し迷った点として，Github Pagesでのサイト公開の方式が2のタイプあり, 公開方式によってデプロイ方式が複数パターンあった．</p>
<p>公開方式は以下の2つのパターン</p>
<ul>
<li>User/Organization Pages
<code>(https://&lt;USERNAME|ORGANIZATION&gt;.github.io/)</code></li>
<li>Project Pages
<code>(https://&lt;USERNAME|ORGANIZATION&gt;.github.io/&lt;PROJECT&gt;/)</code></li>
</ul>
<p>上記の公開方式により，デプロイ方式が枝分かれする</p>
<ul>
<li>
<p><a href="https://gohugo.io/hosting-and-deployment/hosting-on-github/#github-user-or-organization-pages">GitHub User or Organization Pages</a></p>
<p>リポジトリを「Hugoの設定やソースコード，Markdown」と「レンダリングされたWebサイト」で分ける方式</p>
</li>
<li>
<p><a href="https://gohugo.io/hosting-and-deployment/hosting-on-github/#github-project-pages">GitHub Project Pages</a></p>
<ul>
<li><a href="https://gohugo.io/hosting-and-deployment/hosting-on-github/#deployment-of-project-pages-from-docs-folder-on-master-branch">Deployment of Project Pages from /docs folder on master branch</a>
<ul>
<li>Hugoの<code>publishDir</code>を<code>docs</code>に設定し，<code>master</code>ブランチで<code>docs</code>ディレクトリを公開</li>
</ul>
</li>
<li><a href="https://gohugo.io/hosting-and-deployment/hosting-on-github/#deployment-of-project-pages-from-your-gh-pages-branch">Deployment of Project Pages From Your gh-pages branch</a>
<ul>
<li><code>gh-pages</code>ブランチで公開</li>
</ul>
</li>
<li><a href="https://gohugo.io/hosting-and-deployment/hosting-on-github/#deployment-of-project-pages-from-your-master-branch">Deployment of Project Pages from Your master Branch</a>
<ul>
<li><code>public</code>ディレクトリをrootとして<code>master</code>ブランチで公開</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>最初は<code>User/Organization Pages</code>方式でリポジトリを分けて構築した．この方式の場合，ビルドして生成される<code>public</code>ディレクトリを<code>submodule</code>化しリポジトリを分けているので，<code>deploy.sh</code>なるものを用意してデプロイする．
しかし次第にリポジトリを2つに分けている事に煩わしさを感じてリポジトリを1つにし<code>gh-pages</code>ブランチで公開する様に変更した．</p>
<h3 id="デプロイ自動化">デプロイ自動化</h3>
<p>Github Actionでデプロイを自動化した．利用したのは以下で，どちらかの<code>Getting Started</code>通りに<code>.github/workflows/gh-pages.yml</code>を作成し，<code>master</code>ブランチに<code>push</code>するだけで<code>gh-pages</code>ブランチに公開される様になった．</p>
<ul>
<li><a href="https://github.com/peaceiris/actions-hugo">GitHub Actions for Hugo</a></li>
<li><a href="https://github.com/peaceiris/actions-gh-pages">GitHub Actions for GitHub Pages</a></li>
</ul>
<p>少しハマった所として，<a href="https://docs.github.com/en/free-pro-team@latest/github/working-with-github-pages/managing-a-custom-domain-for-your-github-pages-site">Managing a custom domain for your GitHub Pages site</a>に従い設定したカスタムドメイン用の<code>CNAME</code>ファイルがデプロイ時に消えてしまい，リポジトリ -&gt; Settings -&gt; Custom domain の値が元に戻ってサイトが見れないようになってしまった．</p>
<p><a href="https://github.com/peaceiris/actions-gh-pages">GitHub Actions for GitHub Pages</a>側の <code>README</code>をよく読むと<code>CNAME</code>ファイルを追加するオプションがあった．</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-yaml" data-lang="yaml">- <span style="color:#f92672">name</span>: <span style="color:#ae81ff">Deploy</span>
  <span style="color:#f92672">uses</span>: <span style="color:#ae81ff">peaceiris/actions-gh-pages@v3</span>
  <span style="color:#f92672">with</span>:
    <span style="color:#f92672">github_token</span>: <span style="color:#ae81ff">${{ secrets.GITHUB_TOKEN }}</span>
    <span style="color:#f92672">publish_dir</span>: <span style="color:#ae81ff">./public</span>
    <span style="color:#f92672">cname</span>: <span style="color:#ae81ff">github.com</span>
</code></pre></div><p><code>REAMDE</code>をよく読む事の重要性を再認識した．</p>
<h1 id="移行してみて">移行してみて</h1>
<p>記事をMarkdownで書いてGit管理し，自分のドメインでサイトを公開し，サイトデザインは<a href="https://themes.gohugo.io/">Theme</a>がたくさん公開されていて自作もできるので，トータルで満足している．</p>
<p>細かい設定やタグ機能，デザインなどは少しずつ修正していきたい．</p>
<h1 id="まとめ">まとめ</h1>
<p>いつものペースでたまに更新すると扱い方を忘れそうなので(デプロイ自動化したから大丈夫なはず)，これを機に定期的に書いていきたい．</p>

              ]]></content:encoded></item></channel></rss>