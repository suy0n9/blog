<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>hugo on suy0n9.com</title><link>https://suy0n9.com/tags/hugo/</link><description>Recent content in hugo on suy0n9.com</description><generator>Hugo -- gohugo.io</generator><language>ja-jp</language><copyright>&amp;copy; suy0n9 All Right Reserved.</copyright><lastBuildDate>Sat, 31 Oct 2020 00:13:34 +0900</lastBuildDate><atom:link href="https://suy0n9.com/tags/hugo/index.xml" rel="self" type="application/rss+xml"/><item><title>Hugoのundraftコマンドを再現する</title><link>https://suy0n9.com/posts/2020/10/31/undraft-command/</link><pubDate>Sat, 31 Oct 2020 00:13:34 +0900</pubDate><guid>https://suy0n9.com/posts/2020/10/31/undraft-command/</guid><description>Hugoでブログを書く際にArchetypesを設定しdraftをtrueにしているのだが，記事を書き終わってgit pushする前にdraftをfalseにするのを毎回忘れてしまう． 更にhugo new posts/&amp;lt;filename&amp;gt;.mdでMarkdown作成時にタイムスタンプが付与されるが，記事を書き終えた後に再度タイムスタンプを書き換えるのが面倒だったので調べた．
結果 どうやらhugo undraftコマンドがあったが，既にremoveされていた．
How to touch the date after undraft is deleted?
解決策 僕は記事を書き始めて日をまたぐ時が多々ある．そしてdraftで書きためておいて然るべきタイミングでpublishしたい時もあるので，上記にあるように簡易スクリプトで対応するようにした．
#!/bin/sh file=$1 now=&amp;#34;$(date &amp;#34;+%Y-%m-%dT%H:%M:%S%z&amp;#34; | sed -e &amp;#39;s/00$/:00/&amp;#39;)&amp;#34; if [ -f &amp;#34;${file}&amp;#34; ]; then sed -i -e &amp;#39;s/^date: 20.*$/date: &amp;#39;&amp;#34;${now}&amp;#34;&amp;#39;/&amp;#39; \ -e &amp;#39;s/^draft: true$/draft: false/&amp;#39; &amp;#34;${file}&amp;#34; echo &amp;#34;Update date: ${now}&amp;#34; echo &amp;#34;Update draft: false&amp;#34; else echo &amp;#34;${file}not found&amp;#34; exit 1 fi exit 0 dateコマンドで取得した%zのタイムゾーンでは+hhmm(+0900)形式になっている．しかしTOMLのoffset-date-timeでは+hh:mm(+09:00)なので，sedで一度置換している．
上記をMacで実行する場合，sedがBSD版なのでGNU版を入れとかないと-iオプションがうまく動かない．
Homebrew でinstallする．
$ brew install gnu-sed If you need to use it as &amp;ldquo;sed&amp;rdquo;, you can add a &amp;ldquo;gnubin&amp;rdquo; directory to your PATH from your bashrc like:</description></item><item><title>MediumからHugoに移行した</title><link>https://suy0n9.com/posts/2020/10/18/medium2hugo/</link><pubDate>Sun, 18 Oct 2020 23:38:52 +0900</pubDate><guid>https://suy0n9.com/posts/2020/10/18/medium2hugo/</guid><description>ブログをMediumからHugoに移行した．
動機 主に以下の理由．
Mediumの会員登録を促すポップアップが盛んになってきた カスタムドメインを使いたい 記事をGit管理したくなった カスタムドメインはそのうち設定しようかと思ってのんびりしていたらdeprecationされていた.
Custom Domains service deprecation
なお，近々復活するみたいだが，時期は未定．
Git管理に関しては，「ブログサービスに一存するよりMarkdownで手元に記事を置いといた方がいざという時にサービスの運営を気にせず制御できる|安心感がある」みたいな話は良く目にしていたので, そうだなぁと思った次第．
これらの条件をすべて満たし，巷でよく使われているHugoにすべきかしばらく検討していた. 構築が面倒だったり凝りすぎて「書く」より「作る」になってしまいそうでずっと棚上げしていたが，重い腰を上げて移行した．
Hugoとは Goで実装されている「Webサイト構築フレームワーク」だ． 使い方や詳細は公式サイトに詳しく書かれているし，既に色んな人が書いているので以下略．
移行について 移行方法は公式ページで紹介されているmedium2mdを使用した.
Mediumからエクスポートしたデータをmedium2mdでMarkdownに変換することでほぼできた．
変換がうまく行かなかった箇所 記事内のURLのMarkdownタイトルが長くなる Markdown記法のURLタイトルに恐らく元のHTMLに含まれているカード型リンク内のサマリ文章までがタイトルになってしまい，とても長いリンクになっていた． 長い箇所は記事数がそんなに多くなかったのであまり深く考えず気づいた箇所だけ手直しした．．．
SNSなどのリンクの埋め込み HugoではMarkdownの中に簡易的な記述でTwitterやYouTubeなどを埋め込めるShortcodeという機能がある．
medium2mdで変換されたMarkdownにはTwitterの埋め込み箇所がまるっと欠損していた．僕の場合は特定の箇所でしかTwitterを参照していなかったので，以下の様な簡易スクリプトでShortcodeを生成して貼り付けた．
YouTubeの埋め込み箇所はそのままURLに展開されていた．これまた使用箇所が少なかったので気づいたところのリンクをShortcodeで貼り直した．
Hosting &amp;amp; Deployment 構築したサイトはGithub Pagesで公開している．
基本的には以下の公式ページ通りにすればできる．
Host on GitHub
少し迷った点として，Github Pagesでのサイト公開の方式が2のタイプあり, 公開方式によってデプロイ方式が複数パターンあった．
公開方式は以下の2つのパターン
User/Organization Pages (https://&amp;lt;USERNAME|ORGANIZATION&amp;gt;.github.io/) Project Pages (https://&amp;lt;USERNAME|ORGANIZATION&amp;gt;.github.io/&amp;lt;PROJECT&amp;gt;/) 上記の公開方式により，デプロイ方式が枝分かれする
GitHub User or Organization Pages
リポジトリを「Hugoの設定やソースコード，Markdown」と「レンダリングされたWebサイト」で分ける方式
GitHub Project Pages
Deployment of Project Pages from /docs folder on master branch HugoのpublishDirをdocsに設定し，masterブランチでdocsディレクトリを公開 Deployment of Project Pages From Your gh-pages branch gh-pagesブランチで公開 Deployment of Project Pages from Your master Branch publicディレクトリをrootとしてmasterブランチで公開 最初はUser/Organization Pages方式でリポジトリを分けて構築した．この方式の場合，ビルドして生成されるpublicディレクトリをsubmodule化しリポジトリを分けているので，deploy.</description></item></channel></rss>